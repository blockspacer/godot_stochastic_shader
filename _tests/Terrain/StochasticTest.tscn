[gd_scene load_steps=13 format=2]

[ext_resource path="res://_tests/Terrain/Stochastic.tres" type="Material" id=1]
[ext_resource path="res://_tests/Terrain/CloverField.jpg" type="Texture" id=2]
[ext_resource path="res://_tests/Terrain/CloverField_n.jpg" type="Texture" id=3]
[ext_resource path="res://Stochastic.gd" type="Script" id=4]
[ext_resource path="res://_tests/Terrain/Stochastic_Simple.shader" type="Shader" id=6]

[sub_resource type="PlaneMesh" id=1]

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 6 )
shader_param/albedo = Color( 1, 0.996094, 0.996094, 1 )
shader_param/method = true
shader_param/specular = null
shader_param/metallic = null
shader_param/roughness = null
shader_param/point_size = 0.0
shader_param/metallic_texture_channel = null
shader_param/roughness_texture_channel = null
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 50, 50, 50 )
shader_param/uv1_offset = null
shader_param/uv2_scale = null
shader_param/uv2_offset = null
shader_param/texture_albedo = ExtResource( 2 )

[sub_resource type="CubeMesh" id=3]
material = SubResource( 2 )

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
 
uniform sampler2D normal_map;
uniform sampler2D color_map;
uniform sampler2D noise_texture;
uniform bool method = true;
uniform float offset : hint_range(0, 1);
uniform float scale : hint_range(1, 50);
 
float sum( vec3 v ) { return v.x+v.y+v.z; }

vec2 hash2D2D (vec2 s)
{
    //magic numbers
    return fract(sin(mod(vec2(dot(s, vec2(127.1,311.7)), dot(s, vec2(269.5,183.3))), 3.14159))*43758.5453);
}
 
 
vec3 textureNoTile(in sampler2D map, in vec2 x, float v)
{
    float k = texture(noise_texture, 100.0 * x).x; // cheap (cache friendly) lookup
   
    vec2 duvdx = dFdx( x );
    vec2 duvdy = dFdx( x );
   
    float l = k*8.0;
    float f = fract(l);
    float ia;
    float ib;
   
    if(method){
        ia = floor(l); // my method
        ib = ia + 1.0;
    }else{
        ia = floor(l+0.5); // suslik's method (see comments)
        ib = floor(l);
        f = min(f, 1.0-f)*2.0;
    }
   
    vec2 offa = sin(vec2(3.0,7.0)*ia); // can replace with any other hash
    vec2 offb = sin(vec2(3.0,7.0)*ib); // can replace with any other hash
   
    vec3 cola = textureGrad( map, x + v*offa, duvdx, duvdy ).xyz;
    vec3 colb = textureGrad( map, x + v*offb, duvdx, duvdy ).xyz;
   
    return mix( cola, colb, smoothstep(0.2,0.8,f-0.1*sum(cola-colb)));
}
 
void fragment(){
    vec2 uv = UV * scale;
    float f = offset;
    ALBEDO = textureNoTile(color_map, uv, f);
    NORMAL = (textureNoTile(normal_map, uv, f));
}"

[sub_resource type="OpenSimplexNoise" id=5]
seed = 18938
octaves = 6
period = 256.0
persistence = 1.0
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=6]
width = 128
height = 128
seamless = true
as_normalmap = true
bump_strength = 32.0
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 4 )
shader_param/method = false
shader_param/offset = 0.5
shader_param/scale = 50.0
shader_param/normal_map = ExtResource( 3 )
shader_param/color_map = ExtResource( 2 )
shader_param/noise_texture = SubResource( 6 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1.96572, 0, 0, 0, 1.96572, 0, 0, 0, 1.96572, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = ExtResource( 1 )
script = ExtResource( 4 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1.96572, 0, 0, 0, 1.96572, 0, 0, 0, 1.96572, 3.92387, 0, 0 )
mesh = SubResource( 1 )
material/0 = ExtResource( 1 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( 1.96572, 0, 0, 0, 1.96572, 0, 0, 0, 1.96572, 3.92387, 4.03447, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="MeshInstance4" type="MeshInstance" parent="."]
transform = Transform( 1.96572, 0, 0, 0, 1.96572, 0, 0, 0, 1.96572, 4.25901, 7.93474, 2.20214 )
mesh = SubResource( 3 )
material/0 = SubResource( 7 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.434185, 0.85911, -0.27095, -0.336223, 0.433595, 0.836032, 0.835726, -0.271893, 0.477113, 0, 8.00885, 0 )
light_indirect_energy = 0.0
light_specular = 1.0
shadow_enabled = true

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.689784, 0.724015, 0, -0.724015, 0.689784, 0, 2.85104, 4.41323 )
